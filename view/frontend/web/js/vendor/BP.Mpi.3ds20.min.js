/**
 * @author      Signativa Core Team <dev@signativa.com.br>
 * @copyright   Signativa (http://www.signativa.com.br)
 * @license     http://www.signativa.com.br  Copyright
 *
 * @link        http://www.signativa.com.br
 */

/*browser:true*/
/*global define*/
define(
    [
        'jquery',
        'Braspag_BraspagPagador/js/vendor/BP.Mpi.3ds20.conf',
        'Magento_Checkout/js/action/place-order',
        'Braspag_BraspagPagador/js/action/redirect-after-placeorder',
        'Magento_Checkout/js/action/redirect-on-success',
        'Magento_Checkout/js/model/full-screen-loader',
        'Braspag_BraspagPagador/js/view/payment/method-renderer/creditcard/silentorderpost',
        'Braspag_BraspagPagador/js/view/payment/method-renderer/creditcard/silentauthtoken',
        'uiRegistry',
        'Magento_Ui/js/model/messageList',
        'Magento_Checkout/js/model/error-processor'
    ],
    function(
        $,
        bpMpi3ds20Conf,
        placeOrderAction,
        RedirectAfterPlaceOrder,
        redirectOnSuccessAction,
        fullScreenLoader,
        sopt,
        soptToken,
        uiRegistry,
        messageList,
        errorProcessor
    ) {
        'use strict';

        function bpmpi_authenticate() {
            BP.Mpi.authenticate()
        }

        function bpmpi_load() {
            BP.Mpi.load()
        }
        var BP = function() {
            function e(e) {
                return document.getElementsByClassName(e).length > 0
            }

            function r(r) {
                return e(r) ? document.getElementsByClassName(r)[0].value : null
            }

            function n(r, n) {
                return e(r) ? document.getElementsByClassName(r)[0].value : n
            }

            function t(e) {
                return e.replace("bpmpi_", "").replace(/\_/g, "")
            }

            function i(e) {
                return /\#/.test(e)
            }

            function o(e, r) {
                return e.replace(/\#/, r)
            }

            function a(e) {
                var r = t(e),
                    n = r.split("#");
                return {
                    enumerable: n[0],
                    field: n[1]
                }
            }

            function s() {
                for (var n = {}, s = 0; s < N.length; s++) {
                    var p = N[s];
                    if (i(p) === !1) {
                        var c = t(p),
                            u = r(p);
                        u && (n[c] = r(p))
                    } else
                        for (var d = 1, l = o(p, d); e(l);) {
                            var m = a(p);
                            n[m.enumerable] || (n[m.enumerable] = []), u = r(l), n[m.enumerable][d - 1] || (n[m.enumerable][d - 1] = {}), n[m.enumerable][d - 1][m.field] = u, d++, l = o(p, d)
                        }
                }
                return n
            }

            function bpmpi_config() {
                return { Debug: 0, Environment: "PRD" }
            }

            function p() {
                let env = bpMpi3ds20Conf.Environment;
                let dbg = bpMpi3ds20Conf.Debug;
                return "PRD" == env ? bpmpi_config() : {
                    Debug: !0,
                    Environment: env.Environment
                }
            }

            function c() {
                D.Environment = bpMpi3ds20Conf.Environment;
                return D.Environment
            }

            function u() {
                var e = c(),
                    r = {
                        TST: "https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js",
                        SDB: "https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js",
                        PRD: "https://songbird.cardinalcommerce.com/edge/v1/songbird.js"
                    };
                return r[e]
            }

            function d() {
                return {
                    orderNumber: r("bpmpi_ordernumber"),
                    currency: r("bpmpi_currency"),
                    amount: r("bpmpi_totalamount")
                }
            }

            function l(e) {
                var r = c(),
                    n = {
                        TST: "https://localhost:44351",
                        SDB: "https://mpisandbox.braspag.com.br",
                        PRD: "https://mpi.braspag.com.br"
                    };
                return n[r] + e
            }

            function m(e, r) {
                var n = document.getElementsByTagName("head")[0],
                    t = document.createElement("script");
                t.type = "text/javascript", t.src = e, t.onreadystatechange = r, t.onload = r, n.appendChild(t)
            }

            function _() {
                return "undefined" !== D.Debug ? D.Debug : !1
            }

            function b() {
                _() && console.log.apply(null, arguments)
            }

            function h() {
                return _() ? "verbose" : "off"
            }

            function g(e, r) {
                T = r, b("[MPI]", "Initializing..."), b("[MPI]", "Token =", e), b("[MPI]", "ReferenceId =", T), Cardinal.configure({
                    timeout: "8000",
                    maxRequestRetries: "10",
                    logging: {
                        level: h()
                    }
                }), Cardinal.setup("init", {
                    jwt: e
                }), Cardinal.on("payments.setupComplete", function(e) {
                    b("[MPI]", "Setup complete."), b("[MPI]", "SetupCompleteData =", e), M("onReady")
                }), Cardinal.on("payments.validated", function(e) {
                    switch (b("[MPI]", "Payment validated."), b("[MPI]", "ActionCode =", e.ActionCode), b("[MPI]", "Data =", e), e.ActionCode) {
                        case "SUCCESS":
                        case "NOACTION":
                        case "FAILURE":
                            A(e.Payment.ProcessorTransactionId);
                            break;
                        case "ERROR":
                            k.Number = e.ErrorNumber, k.Description = e.ErrorDescription, e.Payment && e.Payment.ProcessorTransactionId ? A(e.Payment.ProcessorTransactionId) : M("onError", {
                                Xid: null,
                                Eci: null,
                                ReturnCode: k.HasError() ? k.Number : "MPI901",
                                ReturnMessage: k.HasError() ? k.Description : "Unexpected error",
                                ReferenceId: null
                            });
                            break;
                        default:
                            k.Number = e.ErrorNumber, k.Description = e.ErrorDescription, "Success" === e.ErrorDescription && e.Payment && e.Payment.ProcessorTransactionId ? A(e.Payment.ProcessorTransactionId) : M("onError", {
                                Xid: null,
                                Eci: null,
                                ReturnCode: k.HasError() ? k.Number : "MPI902",
                                ReturnMessage: k.HasError() ? k.Description : "Unexpected authentication response",
                                ReferenceId: null
                            })
                    }
                })
            }

            function f(e, n, t) {
                if(n["shiptozipcode"] != undefined)
                {
                    n.shiptozipcode = n.shiptozipcode.replace(/[^a-zA-Z0-9]/g, '');
                    n.billtozipcode = n.billtozipcode.replace(/[^a-zA-Z0-9]/g, '');
                    n.shiptophonenumber = n.shiptophonenumber.replace(/[^a-zA-Z0-9]/g, '');
                    n.billtophonenumber = n.billtophonenumber.replace(/[^a-zA-Z0-9]/g, '');
                }
                var i = JSON.stringify(n),
                    o = new XMLHttpRequest;
                o.onreadystatechange = function() {
                    if (4 === this.readyState)
                        if (200 === this.status) {
                            var e = JSON.parse(o.responseText);
                            t(e, this)
                            if (e.Status == 'FAILED' && e.ReturnCode == '476')
                            {
                                setErrorMessage(e.Status, e.ReturnCode);
                            }
                        } else M("onError", {
                            Xid: null,
                            Eci: null,
                            ReturnCode: "MPI900",
                            ReturnMessage: "An error has occurred (" + this.status + ")",
                            ReferenceId: null
                        })
                },
                o.open("POST", l(e)),
                o.setRequestHeader("Content-Type", "application/json"),
                o.setRequestHeader("Authorization", "Bearer " + r("bpmpi_accesstoken")),
                o.send(i)
            }

            function C() {
                var e = n("bpmpi_auth", "true");
                return b("[MPI]", "Authentication Enabled =", e), "false" === e ? (M("onDisabled"), !1) : !0
            }

            function E() {
                if (b("[MPI]", "Debug =", _()), b("[MPI]", "Enviroment =", c()), C()) {
                    if (O) return void b("[MPI]", "Resources already loaded...");
                    b("[MPI]", "Loading resources..."), O = !0, m(u(), function() {
                        b("[MPI]", "Cardinal script loaded."), f("/v2/3ds/init", d(), function(e) {
                            g(e.Token, e.ReferenceId)
                        })
                    })
                }
            }

            function I() {
                if (C()) {
                    if (!O) return void b("[MPI]", "Resources not loaded...");
                    b("[MPI]", "Enrolling..."), Cardinal.trigger("accountNumber.update", r("bpmpi_cardnumber")), f("/v2/3ds/enroll", s(), function(e) {
                        b("[MPI]", "Enrollment result =", e), e.Version && (X = e.Version[0]);
                        var r = e.Authentication;
                        switch (e.Status) {
                            case "ENROLLED":
                                R(e);
                                break;
                            case "VALIDATION_NEEDED":
                                A(e.AuthenticationTransactionId);
                                break;
                            case "AUTHENTICATION_CHECK_NEEDED":
                                v(r);
                                break;
                            case "NOT_ENROLLED":
                                M("onUnenrolled", {
                                    Xid: r.Xid,
                                    Eci: r.Eci,
                                    Version: X,
                                    ReferenceId: r.DirectoryServerTransactionId
                                });
                                if(e.VEResEnrolled == "U")
                                {
                                    setErrorMessage(e.Status, e.ReturnCode);
                                }
                                break;
                            case "FAILED":
                                M("onFailure", {
                                    Xid: r.Xid,
                                    Eci: r.Eci || r.EciRaw,
                                    Version: X,
                                    ReferenceId: r.DirectoryServerTransactionId
                                });
                                break;
                            case "UNSUPPORTED_BRAND":
                                M("onUnsupportedBrand", {
                                    Xid: null,
                                    Eci: null,
                                    ReturnCode: e.ReturnCode,
                                    ReturnMessage: e.ReturnMessage,
                                    ReferenceId: null
                                });
                                break;
                            case "UNKNOWN":
                                M("unExpectedErrorOcurred", {
                                    Xid: null,
                                    Eci: null,
                                    ReturnCode: e.ReturnCode,
                                    ReturnMessage: e.ReturnMessage,
                                    ReferenceId: null
                                });
                                break;
                            default:
                                M("onError", {
                                    Xid: null,
                                    Eci: null,
                                    ReturnCode: e.ReturnCode,
                                    ReturnMessage: e.ReturnMessage,
                                    ReferenceId: null
                                })
                        }
                    })
                }
            }

            function y(e, r) {
                return e[r] || null
            }

            function P(e) {
                b("[MPI] Building order object...");
                var r = s(),
                    n = {
                        OrderDetails: {
                            TransactionId: e,
                            OrderNumber: r.ordernumber,
                            CurrencyCode: y(r, "currency"),
                            OrderChannel: r.transactionmode || "S"
                        },
                        Consumer: {
                            Account: {
                                AccountNumber: r.cardnumber,
                                ExpirationMonth: r.cardexpirationmonth,
                                ExpirationYear: r.cardexpirationyear
                            },
                            Email1: y(r, "shiptoemail"),
                            Email2: y(r, "billtoemail"),
                            ShippingAddress: {
                                FullName: null,
                                Address1: null,
                                Address2: null,
                                City: null,
                                State: null,
                                PostalCode: null,
                                CountryCode: null,
                                Phone1: null
                            },
                            BillingAddress: {
                                FullName: y(r, "billtocontactname"),
                                Address1: y(r, "billtostreet1"),
                                Address2: y(r, "billtostreet2"),
                                City: y(r, "billtocity"),
                                State: null === y(r, "billtostate") ? null : y(r, "billtostate").toUpperCase(),
                                PostalCode: y(r, "billtozipcode"),
                                CountryCode: y(r, "billtocountry"),
                                Phone1: y(r, "billtophonenumber")
                            }
                        },
                        Cart: []
                    };
                if ("true" === r.shiptosameasbillto) {
                    var t = n.Consumer.BillingAddress;
                    n.Consumer.ShippingAddress.FullName = t.FullName, n.Consumer.ShippingAddress.Address1 = t.Address1, n.Consumer.ShippingAddress.Address2 = t.Address2, n.Consumer.ShippingAddress.City = t.City, n.Consumer.ShippingAddress.State = t.State, n.Consumer.ShippingAddress.PostalCode = t.PostalCode, n.Consumer.ShippingAddress.Phone1 = t.Phone1, n.Consumer.ShippingAddress.CountryCode = t.CountryCode
                } else n.Consumer.ShippingAddress.FullName = y(r, "shiptoaddressee"), n.Consumer.ShippingAddress.Address1 = y(r, "shiptostreet1"), n.Consumer.ShippingAddress.Address2 = y(r, "shiptostreet2"), n.Consumer.ShippingAddress.City = y(r, "shiptocity"), n.Consumer.ShippingAddress.State = null === y(r, "shiptostate") ? null : y(r, "shiptostate").toUpperCase(), n.Consumer.ShippingAddress.PostalCode = y(r, "shiptozipcode"), n.Consumer.ShippingAddress.Phone1 = y(r, "shiptophonenumber"), n.Consumer.ShippingAddress.CountryCode = y(r, "shiptocountry");
                if (r.cart)
                    for (var i = 0; i < r.cart.length; i++) n.Cart.push({
                        Name: y(r.cart[i], "name"),
                        Description: y(r.cart[i], "description"),
                        SKU: y(r.cart[i], "sku"),
                        Quantity: y(r.cart[i], "quantity"),
                        Price: y(r.cart[i], "unitprice")
                    });
                return b("[MPI] Order object =", n), n
            }

            function R(e) {
                var n = r("bpmpi_auth_suppresschallenge");
                if (b("[MPI] Suppression enabled = " + n), "true" === n) return b("[MPI]", "Challenge supressed..."), void M("onChallengeSuppression", {
                    Xid: null,
                    Eci: null,
                    ReturnCode: "MPI601",
                    ReturnMessage: "Challenge suppressed",
                    ReferenceId: null
                });
                b("[MPI]", "Showing challenge...");
                var t = {
                        AcsUrl: e.AcsUrl,
                        Payload: e.Pareq,
                        TransactionId: e.AuthenticationTransactionId
                    },
                    i = P(e.AuthenticationTransactionId);
                b("[MPI] Continue object =", t), Cardinal.continue("cca", t, i)
            }

            function v(e) {
                switch (b("[MPI]", "Authentication result =", e), e.Status) {
                    case "AUTHENTICATED":
                        M("onSuccess", {
                            Cavv: e.Cavv,
                            Xid: e.Xid,
                            Eci: e.Eci,
                            Version: e.Version[0],
                            ReferenceId: e.DirectoryServerTransactionId
                        });
                        if (e.AuthenticationStatusMessage == 'Success' && e.Status == "AUTHENTICATED" && e.ParesStatus == "Y")
                        {
                            $.when(
                                placeOrderAction(getData(e), self.messageContainer)
                            ).done(function(){
                                redirectOnSuccessAction.execute()
                            }).fail(
                                function (response) {
                                    // errorProcessor.process(response, self.messageContainer);
                                    setErrorMessage(response.statusText, response.status);
                                }
                            ).always(function () {
                                fullScreenLoader.stopLoader();
                            });
                        }
                        break;
                    case "UNAVAILABLE":
                        M("onUnenrolled", {
                            Xid: e.Xid,
                            Eci: e.Eci,
                            Version: e.Version[0],
                            ReferenceId: e.DirectoryServerTransactionId
                        });
                        break;
                    case "FAILED":
                        M("onFailure", {
                            Xid: e.Xid,
                            Eci: e.Eci || e.EciRaw,
                            Version: e.Version[0],
                            ReferenceId: e.DirectoryServerTransactionId
                        });
                        setErrorMessage(e.ReturnMessage, e.returnCode);
                        break;
                    case "ERROR_OCCURRED":
                        M("onError", {
                            Xid: e.Xid,
                            Eci: e.Eci || e.EciRaw,
                            ReturnCode: e.ReturnCode,
                            ReturnMessage: e.ReturnMessage,
                            ReferenceId: e.DirectoryServerTransactionId
                        });
                        break;
                    default:
                        M("onError", {
                            Xid: e.Xid,
                            Eci: e.Eci || e.EciRaw,
                            ReturnCode: k.HasError() ? k.Number : e.ReturnCode,
                            ReturnMessage: k.HasError() ? k.Description : e.ReturnMessage,
                            ReferenceId: e.DirectoryServerTransactionId
                        })
                }
            }

            function A(e) {
                var r = s();
                r.transactionId = e, b("[MPI]", "Validating..."), f("/v2/3ds/validate", r, function(e) {
                    v(e)
                })


            }

            function S(e) {
                return "function" == typeof D[e]
            }

            function M(e, r) {
                b("[MPI]", "Notifying..."), b("[MPI]", "Event type =", e), b("[MPI]", "Event data =", r || "None"), S(e) && D[e](r)
            }

            function getData(e) {

                if (getCardType() == "braspag_pagador_creditcard")
                {
                    var data = {
                        'method': getCardType(),
                        'additional_data': {
                            'cc_cid': document.getElementById('braspag_pagador_creditcard_cc_cid').value,
                            'cc_type': getCcType(),
                            'cc_exp_year': document.getElementById('braspag_pagador_creditcard_expiration_yr').value,
                            'cc_exp_month': document.getElementById('braspag_pagador_creditcard_expiration').value,
                            'cc_number': document.getElementById('braspag_pagador_creditcard_cc_number').value,
                            'cc_owner': document.getElementById('braspag_pagador_creditcard_cc_owner').value,
                            'cc_installments': document.getElementById('braspag_pagador_creditcard_installments').value == '' ? '1' : document.getElementById('braspag_pagador_creditcard_installments').value,
                            'cc_savecard': 0,
                            'cc_soptpaymenttoken': "",
                            'authentication_failure_type': "",
                            'authentication_cavv': e.Cavv,
                            'authentication_xid': e.Xid,
                            'authentication_eci': e.Eci,
                            'authentication_version': e.Version[0],
                            'authentication_reference_id': e.DirectoryServerTransactionId
                        }
                    };

                    return data;
                }

                if (getCardType() == "braspag_pagador_debitcard")
                {
                    var data = {
                        'method': getCardType(),
                        'additional_data': {
                            'cc_cid': document.getElementById('braspag_pagador_debitcard_cc_cid').value,
                            'cc_type': getCcType(),
                            'cc_exp_year': document.getElementById('braspag_pagador_debitcard_expiration_yr').value,
                            'cc_exp_month': document.getElementById('braspag_pagador_debitcard_expiration').value,
                            'cc_number': document.getElementById('braspag_pagador_debitcard_cc_number').value,
                            'cc_owner': document.getElementById('braspag_pagador_debitcard_cc_owner').value,
                            'cc_installments': '1',
                            'cc_savecard': 0,
                            'cc_soptpaymenttoken': "",
                            'authentication_failure_type': "",
                            'authentication_cavv': e.Cavv,
                            'authentication_xid': e.Xid,
                            'authentication_eci': e.Eci,
                            'authentication_version': e.Version[0],
                            'authentication_reference_id': e.DirectoryServerTransactionId
                        }
                    }

                    return data;
                }
            }

            function getCcType()
            {
                let rCcType;
                if (document.querySelector('input[name=payment\\[cc_type\\]]:checked') == null)
                {
                    rCcType = document.querySelector('input[name=payment\\[cc_type\\]]:checked')
                } else {
                    rCcType = document.querySelector('input[name=payment\\[cc_type\\]]:checked').value
                }
                return rCcType;
            }

            function getCardType()
            {
                let rCardType;
                if (document.querySelector('input[name=payment\\[method\\]]:checked') == null)
                {
                    rCardType = document.querySelector('input[name=payment\\[method\\]]:checked')
                } else {
                    rCardType = document.querySelector('input[name=payment\\[method\\]]:checked').value
                }
                return rCardType;
            }

            function setErrorMessage(strMessage, ErrorCode)
            {
                switch (ErrorCode) {
                    case "231":
                        strMessage = $.mage.__('Invalid card data, please check card data and try again!');
                        break;
                    case "476":
                        strMessage = $.mage.__('Customer cannot be authenticated');
                        break;
                    case 400:
                        strMessage = $.mage.__('Authentication failed, contact us');
                        break;
                     default:
                        strMessage = $.mage.__(strMessage);
                        if (strMessage == "NOT_ENROLLED")
                        {
                            strMessage = $.mage.__('Invalid card data, please contact us!');
                        }
                        break;
                }
                window.scrollTo(0, 0);
                messageList.addErrorMessage({
                    message: strMessage
                });
                fullScreenLoader.stopLoader();
            }

            var D = p(),
                N = ["bpmpi_transaction_mode", "bpmpi_merchant_url", "bpmpi_merchant_newcustomer", "bpmpi_ordernumber", "bpmpi_currency", "bpmpi_totalamount", "bpmpi_paymentmethod", "bpmpi_installments", "bpmpi_cardnumber", "bpmpi_cardexpirationmonth", "bpmpi_cardexpirationyear", "bpmpi_cardalias", "bpmpi_default_card", "bpmpi_cardaddeddate", "bpmpi_giftcard_amount", "bpmpi_giftcard_currency", "bpmpi_billto_customerid", "bpmpi_billto_contactname", "bpmpi_billto_email", "bpmpi_billto_street1", "bpmpi_billto_street2", "bpmpi_billto_city", "bpmpi_billto_state", "bpmpi_billto_zipcode", "bpmpi_billto_phonenumber", "bpmpi_billto_country", "bpmpi_shipto_sameasbillto", "bpmpi_shipto_addressee", "bpmpi_shipto_email", "bpmpi_shipto_street1", "bpmpi_shipto_street2", "bpmpi_shipto_city", "bpmpi_shipto_state", "bpmpi_shipto_zipcode", "bpmpi_shipto_shippingmethod", "bpmpi_shipto_phonenumber", "bpmpi_shipto_firstusagedate", "bpmpi_shipto_country", "bpmpi_device_ipaddress", "bpmpi_device_#_fingerprint", "bpmpi_device_#_provider", "bpmpi_cart_#_name", "bpmpi_cart_#_description", "bpmpi_cart_#_sku", "bpmpi_cart_#_quantity", "bpmpi_cart_#_unitprice", "bpmpi_order_recurrence", "bpmpi_order_productcode", "bpmpi_order_countlast24hours", "bpmpi_order_countlast6months", "bpmpi_order_countlast1year", "bpmpi_order_cardattemptslast24hours", "bpmpi_order_marketingoptin", "bpmpi_order_marketingsource", "bpmpi_useraccount_guest", "bpmpi_useraccount_createddate", "bpmpi_useraccount_changeddate", "bpmpi_useraccount_passwordchangeddate", "bpmpi_useraccount_authenticationmethod", "bpmpi_useraccount_authenticationprotocol", "bpmpi_useraccount_authenticationtimestamp", "bpmpi_airline_travelleg_#_carrier", "bpmpi_airline_travelleg_#_departuredate", "bpmpi_airline_travelleg_#_origin", "bpmpi_airline_travelleg_#_destination", "bpmpi_airline_passenger_#_name", "bpmpi_airline_passenger_#_ticketprice", "bpmpi_airline_numberofpassengers", "bpmpi_airline_billto_passportcountry", "bpmpi_airline_billto_passportnumber", "bpmpi_mdd1", "bpmpi_mdd2", "bpmpi_mdd3", "bpmpi_mdd4", "bpmpi_mdd5", "bpmpi_auth_notifyonly", "bpmpi_auth_suppresschallenge", "bpmpi_recurring_enddate", "bpmpi_recurring_frequency", "bpmpi_recurring_originalpurchasedate", "bpmpi_challenge_window_size"],
                T = null,
                X = null,
                k = {
                    Number: null,
                    Description: null,
                    HasError: function() {
                        return null !== this.Number
                    }
                },
                O = !1;
            return {
                Mpi: {
                    load: function() {
                        E()
                    },
                    authenticate: function() {
                        I()
                    }
                }
            }
        }();

        return {
            bpmpi_authentication: function () {
                return new Promise(function (resolve, reject){
                    resolve(BP.Mpi.authenticate());
                });
            },
            bpmpi_load : function () {
                BP.Mpi.load()
            }
        };
    }
);
